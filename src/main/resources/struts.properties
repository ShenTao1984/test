### Struts default properties

###(can be overridden by a struts.properties file in the root of the classpath)
###


struts.ui.theme=simple

### This can be used to set your default locale and encoding scheme
struts.locale=zh_CN
struts.i18n.encoding=UTF-8

### if specified, the default object factory can be overridden here
### Note: short-hand notation is supported in some cases, such as "spring"
###       Alternatively, you can provide a com.opensymphony.xwork2.ObjectFactory subclass name here
struts.objectFactory=spring

### if specified, the default object factory can be overridden here
### Note: short-hand notation is supported in some cases, such as "spring"
###       Alternatively, you can provide a com.opensymphony.xwork2.ObjectFactory subclass name here  
#struts.objectFactory = spring

### specifies the autoWiring logic when using the SpringObjectFactory.
### valid values are: name, type, auto, and constructor (name is the default)
#struts.objectFactory.spring.autoWire = name

### indicates to the struts-spring integration if Class instances should be cached
### this should, until a future Spring release makes it possible, be left as true
### unless you know exactly what you are doing!
### valid values are: true, false (true is the default)
#struts.objectFactory.spring.useClassCache = true

### Used by the DefaultActionMapper
### You may provide a comma separated list, e.g. struts.action.extension=action,jnlp,do
struts.action.extension=do

### Configuration reloading
### This will cause the configuration to reload struts.xml when it is changed
struts.configuration.xml.reload=true

### when set to true, Struts will act much more friendly for developers. This
### includes:
### - struts.i18n.reload = true
### - struts.configuration.xml.reload = true
### - raising various debug or ignorable problems to errors
###   For example: normally a request to foo.action?someUnknownField=true should
###                be ignored (given that any value can come from the web and it
###                should not be trusted). However, during development, it may be
###                useful to know when these errors are happening and be told of
###                them right away.
struts.devMode=false

### when set to true, resource bundles will be reloaded on _every_ request.
### this is good during development, but should never be used in production
struts.i18n.reload=false

### Load custom default resource bundles

struts.custom.i18n.resources=errors.webapp,errors.struts,ui.webapp,ui.common

### Used by FilterDispatcher
### If true then Struts serves static content from inside its jar.
### If false then the static content must be available at <context_path>/struts

#If set to true, the static items will be available at the context root of my application. If set to false, you must include struts/ in the path.
struts.serve.static=true

### Used by FilterDispatcher
### This is good for development where one wants changes to the static content be
### fetch on each request.
### NOTE: This will only have effect if struts.serve.static=true
### If true -> Struts will write out header for static contents such that they will
###             be cached by web browsers (using Date, Cache-Content, Pragma, Expires)
###             headers).
### If false -> Struts will write out header for static contents such that they are
###            NOT to be cached by web browser (using Cache-Content, Pragma, Expires
###            headers)
struts.serve.static.browserCache=false

### Parser to handle HTTP POST requests, encoded using the MIME-type multipart/form-data
struts.multipart.saveDir = /tmp
#Max Upload File Size 600M
struts.multipart.maxSize=629145600

### possible values are: none, get or all
struts.url.includeParams=none

### used to build URLs, such as the UrlTag
struts.url.https.port = 8443


### workaround for some app servers that don't handle HttpServletRequest.getParameterMap()
### often used for WebLogic, Orion, and OC4J
struts.dispatcher.parametersWorkaround = false

### Set this to false if you wish to disable implicit dynamic method invocation
### via the URL request. This includes URLs like foo!bar.action, as well as params
### like method:bar (but not action:foo). 
### An alternative to implicit dynamic method invocation is to use wildcard 
### mappings, such as <action name="*/*" method="{2}" class="actions.{1}">
# struts2 security, set false is safe
struts.enable.DynamicMethodInvocation=true

### Set this to true if you wish to allow slashes in your action names.  If false,
### Actions names cannot have slashes, and will be accessible via any directory
### prefix.  This is the traditional behavior expected of WebWork applications.
### Setting to true is useful when you want to use wildcards and store values
### in the URL, to be extracted by wildcard patterns, such as 
### <action name="*/*" method="{2}" class="actions.{1}"> to match "/foo/edit" or 
### "/foo/save".
struts.enable.SlashesInActionNames=true

#VelocityContext Defined
struts.velocity.contexts=com.wondersgroup.xinfang.framework.ext.struts2.velocity.VelocityContextUtil

#struts.ognl.allowStaticMethodAccess
struts.ognl.allowStaticMethodAccess=true
